package APS_10_LinkedList;

class Node{
	String dataField;
	Node link;
	
	Node(){}
	
	Node(String dataField){
		this.dataField = dataField;
		// link = null; 어차피, 참조자료형의 초기값은 null
	}
}

class SinglyLinkedList{
	Node head;
	int size;
	
	SinglyLinkedList(){
		head = new Node();
	}
	
	// 데이터 삽입
	
	// 가장 앞쪽에 삽입
	void addFirst(String dataField) {
		Node newNode = new Node(dataField);
		newNode.link = head.link;
		head.link = newNode;
		
		size++;
	}
	
	// 가장 뒤쪽에 삽입
	void addLast(String data) {
		Node newNode = new Node(data);
		
		Node curr = head;
		while(curr.link != null) {
			curr = curr.link;
		}
		
		curr.link = newNode;
		size++;
	}
	
	// 중간부분 삽입
	// 지정하기 나름인데, idx번호의 앞에 삽입된다고 하자.
	void add(int idx, String dataField) {
		if(idx<0 || size < idx) {
			System.out.println("삽입할 수 없는 위치입니다.");
			return;
		}
		
		// curr가 삽입하고자 하는 위치의 앞의 노드를 가리킴.
		Node curr = head;
		for (int i=0; i<idx; i++) {
			curr=curr.link;
		}
		
		Node newNode = new Node(dataField);
		newNode.link = curr.link; // 새로 추가한 링크는 
		curr.link = newNode;
		
		size++;
	}
	
	
	// 데이터 삭제
	void remove(int idx) {
		if(idx<0 || size <= idx) {
			System.out.println("삭제할 수 있는 범위를 벗어났습니다.");
			return;
		}
		
		Node curr = head;
		for (int i=0; i<idx; i++) {
			curr=curr.link;
		}
		curr.link = curr.link.link;
		size--;
	}
	// 데이터 조회
	void printList() {
		Node curr = head.link;
		while( curr != null) {
			System.out.print(curr.dataField + " -> ");
			curr = curr.link;
		}
		System.out.println();
	}
	
	int getSize() {
		Node curr = head;
		int size=0;
		while(curr.link!= null) {
			curr = curr.link;
			size++;
		}
		return size;
	}
}

public class LinkedList_단순연결리스트 {
	public static void main(String[] args) {
	
		SinglyLinkedList list = new SinglyLinkedList();
		
		list.addFirst("7반 송창용");
		list.addLast("5반 현경찬");
		list.addFirst("8반 박영빈");
		list.addLast("5반 김광현");
		list.printList();
		list.add(1, "8반 엄소현");
		list.printList();
		
	}
}
